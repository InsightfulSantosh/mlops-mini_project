name: CI Pipeline

on: push

jobs:
  # ───────────────────────────────────────────────────────────────────────
  # 🛠️ Job 1: Setup Environment (Shared Dependency)
  # ───────────────────────────────────────────────────────────────────────
  setup-environment:
    runs-on: ubuntu-latest
    outputs:
      python-cache-key: ${{ steps.cache-pip.outputs.cache-key }}
      venv-cache-key: ${{ steps.cache-venv.outputs.cache-key }}
    env:
      VENV_PATH: venv/bin/activate
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Required for full DVC commit history

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        id: cache-pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache virtual environment
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: venv
          key: venv-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            venv-${{ runner.os }}-

      - name: Create & Activate Virtual Environment
        run: |
          if [ ! -d "venv" ]; then
            python -m venv venv
            echo "✅ Virtual environment created"
          else
            echo "✅ Using cached virtual environment"
          fi
          echo "$(pwd)/venv/bin" >> $GITHUB_PATH  # Ensure venv/bin is in PATH

      - name: Install Dependencies
        run: |
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install dvc[s3] awscli mlflow boto3

      - name: Verify Installation
        run: |
          source venv/bin/activate
          which dvc
          dvc --version
          aws --version

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure DVC for AWS S3
        run: |
          source venv/bin/activate
          echo "🔧 Configuring DVC for AWS S3..."
          dvc remote modify origin endpointurl https://s3.${{ secrets.AWS_REGION }}.amazonaws.com
          dvc remote modify origin --local access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          dvc remote modify origin --local secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # ───────────────────────────────────────────────────────────────────────
  # 📥 Job 2: Pull DVC Data from AWS S3
  # ───────────────────────────────────────────────────────────────────────
  pull-dvc-data:
    runs-on: ubuntu-latest
    needs: setup-environment
    continue-on-error: true  # Non-critical job
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Restore Virtual Environment
        uses: actions/cache@v3
        with:
          path: venv
          key: ${{ needs.setup-environment.outputs.venv-cache-key }}

      - name: Pull DVC Data from AWS S3
        run: |
          source venv/bin/activate
          which dvc  # Debugging step
          dvc pull -v || echo "⚠️ DVC Pull Failed, continuing..."
