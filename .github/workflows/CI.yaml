name: CI Pipeline

on: push

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    outputs:
      venv-cache-key: ${{ steps.set-cache-key.outputs.venv_key }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Compute Cache Key
        id: set-cache-key
        run: echo "venv_key=myenv-${{ runner.os }}-${{ hashFiles('requirements.txt') }}" >> $GITHUB_ENV

      - name: Cache Virtual Environment
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/myenv
          key: ${{ env.venv_key }}
          restore-keys: |
            myenv-${{ runner.os }}-

      - name: Create Virtual Environment if Not Cached
        run: |
          if [ ! -d "myenv" ]; then
            python -m venv myenv
            echo "‚úÖ Virtual environment created"
          else
            echo "‚úÖ Using cached virtual environment"
          fi

      - name: Install Dependencies (Ensure DVC is Installed)
        run: |
          source myenv/bin/activate
          if ! command -v dvc &> /dev/null; then
            echo "üöÄ Installing dependencies..."
            pip install --upgrade pip
            pip install -r requirements.txt
            pip install dvc[s3] boto3
          else
            echo "‚úÖ DVC already installed."
          fi

  pull-dvc-data:
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Restore Virtual Environment
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/myenv
          key: ${{ needs.setup-environment.outputs.venv-cache-key }}
          restore-keys: |
            myenv-${{ runner.os }}-

      - name: Ensure Virtual Environment Exists
        run: |
          if [ ! -f "myenv/bin/activate" ]; then
            echo "‚ùå Virtual environment missing! Creating a new one."
            python -m venv myenv
          fi

      - name: Activate Virtual Environment & Verify DVC
        run: |
          source myenv/bin/activate
          if ! command -v dvc &> /dev/null; then
            echo "‚ùå DVC Not Found! Reinstalling..."
            pip install --upgrade pip
            pip install -r requirements.txt
            pip install dvc[s3] boto3
          fi
          which dvc || exit 1  # Fail workflow if DVC is still not found

      - name: Configure AWS for DVC
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          source myenv/bin/activate
          dvc remote modify origin --local access_key_id "${AWS_ACCESS_KEY_ID}"
          dvc remote modify origin --local secret_access_key "${AWS_SECRET_ACCESS_KEY}"
          dvc remote modify origin --local region "${AWS_REGION}"

      - name: Pull DVC Data
        run: |
          source myenv/bin/activate
          dvc pull -v || echo "‚ö†Ô∏è DVC Pull Failed, continuing..."
